// The AcCoRD 2 Simulator (Actor - based Communication via Reaction - Diffusion)
// Copyright 2021 Jack Kirby. All rights reserved. 
// For license details, read LICENSE.txt in the root AcCoRD2 directory


//void TestSimpleEnvironment2()
//{
//	using namespace accord;
//
//	// SIMULATION ============================================================================================================
//	std::string sim_dir = "D:/dev/my_simulation5";
//	Environment::Init(sim_dir, 1, 1, 4, 1, 0, 1, 0, 1);
//	//Random::GetGenerator().advance(2);
//
//	// CREATE REGIONS ========================================================================================================
//	std::vector<double> diffision_coefficients = { 0.1, 0.1, 0.1, 0.1 };
//	std::vector<Vec3i> n_subvolumes = { Vec3i(1), Vec3i(1), Vec3i(1), Vec3i(1) };
//	double start_time = 0, time_step = 0.05;
//	int priority = 0;
//
//	shape::basic::Box box1(Vec3d(-1), Vec3d(2));
//
//	Environment::AddRegion(box1, microscopic::SurfaceType::Reflecting,
//		diffision_coefficients, n_subvolumes, time_step, priority);
//
//	// CREATE ACTIVE ACTORS =======================
//	//double action_interval = Environment::GetRunTime() / 10;
//	//double release_interval = action_interval / 2;
//	//int modulation_strength = 10;
//	//MoleculeIDs release_molecules = { 1 };
//	//ActiveActorRandomTime active_actor(action_interval, release_interval, release_molecules, 
//	//	modulation_strength, Environment::GetRegions({ 0 }), std::make_unique<ActiveActorBox>(Vec3d(-1), Vec3d(2)), 
//	//	start_time, 0, &event_queue, 0);
//
//	// add check environment run time / action interval == length bits / n_modulation_bits (unless max events set)
//	//double action_interval = Environment::GetRunTime() / 5;
//	//double release_interval = action_interval / 2;
//	//double slot_interval = release_interval / 1;
//	//int modulation_strength = 1;
//	//int n_modulation_bits = 2;
//	//MoleculeIDs release_molecules = { 1 };
//	//ActiveActorNonRandom active_actor(action_interval, release_interval, slot_interval, 
//	//	{ 0, 1, 1, 0, 1, 1, 0, 0, 0, 1}, n_modulation_bits, Environment::GetRealisationPath() + "a1_b.bin", release_molecules,
//	//	modulation_strength, Environment::GetRegions({ 0 }), std::make_unique<ActiveActorBox>(Vec3d(-1), Vec3d(2)),
//	//	start_time, 5, &event_queue, 0);
//
//	double action_interval = Environment::GetRunTime() / 5;
//	double release_interval = action_interval / 2;
//	double slot_interval = release_interval / 1;
//	int modulation_strength = 1;
//	int n_modulation_bits = 1;
//	double bit_probability = 0.5;
//	std::vector<int> release_molecules = { 1, 1, 0, 0 };
//	Environment::GetActiveActors().emplace_back(std::make_unique<ActiveActorRandomBits>(
//		action_interval, release_interval, slot_interval,
//		bit_probability, n_modulation_bits,
//		release_molecules, modulation_strength, Environment::GetRegions({ 0 }), Environment::GetMesoscopicRegions({}),
//		std::make_unique<ActiveActorBox>(Vec3d(-1), Vec3d(2)), start_time, 5, 0));
//
//	Json json_regions;
//	for (auto& regions : Environment::GetRegions())
//	{
//		json_regions["shapes"].emplace_back(regions->GetShape().GetBasicShape());
//	}
//	std::ofstream region_file(sim_dir + "/regions.json");
//	region_file << JsonToString(json_regions);
//	region_file.close();
//
//	// CREATE ACTORS =============================================================================================================
//	Environment::GetPassiveActors().reserve(Environment::GetRegions().size());
//	for (int i = 0; i < Environment::GetRegions().size(); i++)
//	{
//		//Environment::GetPassiveActors().emplace_back(std::make_unique<ShapelessPassiveActor>(MicroscopicRegionIDs({ i }),
//		//	MesoscopicRegionIDs({ }), MoleculeIDs({ 0, 1, 2, 3 }), 0, -1, time_step, i, true, true));
//	}
//
//	Json json_actors, shapeless_actor;
//	shapeless_actor["type"] = "none";
//	for (auto& passive_actor : Environment::GetPassiveActors())
//	{
//		if (passive_actor->GetShape() == nullptr)
//		{
//			json_actors["shapes"].emplace_back(shapeless_actor);
//		}
//		else
//		{
//			json_actors["shapes"].emplace_back(*(passive_actor->GetShape()));
//		}
//	}
//	std::ofstream actors_file(sim_dir + "/actors.json");
//	actors_file << JsonToString(json_actors);
//	actors_file.close();
//
//	// Add Events to Event Queue
//	for (auto& region : Environment::GetRegions())
//	{
//		Environment::GetEventQueue().Add(region.get());
//	}
//
//	for (auto& actor : Environment::GetPassiveActors())
//	{
//		Environment::GetEventQueue().Add(actor.get());
//	}
//
//	for (auto& actor : Environment::GetActiveActors())
//	{
//		Environment::GetEventQueue().Add(actor.get());
//	}
//
//	// BEGIN SIMULATION LOOP ======================================================================================================
//	do {
//		if (Environment::GetRealisationNumber() > 0)
//		{
//			for (auto& passive_actor : Environment::GetPassiveActors())
//			{
//				passive_actor->NextRealisation();
//			}
//			for (auto& region : Environment::GetRegions())
//			{
//				region->NextRealisation();
//			}
//		}
//		LOG_INFO("Realisation {}", Environment::GetRealisationNumber());
//		while (true)
//		{
//			auto& event = Environment::GetEventQueue().Front();
//			Environment::SetTime(event.GetEventTime());
//			if (Environment::GetTime() > Environment::GetRunTime())
//			{
//				//LOG_INFO("The Next Event Outside Run Time : ({})", event);
//				break;
//			}
//			//LOG_INFO("Time = {}, EventID = {}, EventType = {}", Environment::GetTime(), event.GetID(), event.GetType());
//			//LOG_INFO("Event:({})", event);
//			event.Run();
//		}
//	} while (Environment::NextRealisation());
//
//	LOG_INFO("Cleaning Up");
//}
//
//void TestMesoscopic()
//{
//	using namespace accord;
//	int n_micro_regions = 0, n_meso_regions = 2, n_passive_actors = n_meso_regions + n_micro_regions, n_active_actors = 1, n_molecule_types = 3;
//	Environment::Init("D:/dev/meso_sim", 1, 10, n_molecule_types, n_micro_regions, n_meso_regions, n_passive_actors, n_active_actors, 1);
//	LOG_INFO("simulation path = {}", Environment::GetSimulationPath());
//
//	Vec3i start_subvolume(1, 1, 1);
//	Vec3i end_subvolume(2, 2, 2);
//	std::vector<Vec3i> remove_subvolumes;
//	Vec3i i;
//	for (i.z = start_subvolume.z; i.z <= end_subvolume.z; i.z++)
//	{
//		for (i.y = start_subvolume.y; i.y <= end_subvolume.y; i.y++)
//		{
//			for (i.x = start_subvolume.x; i.x <= end_subvolume.x; i.x++)
//			{
//				LOG_INFO("remove = {}", i);
//				remove_subvolumes.emplace_back(i);
//			}
//		}
//	}
//
//	Environment::GetMesoscopicRegions().emplace_back(Vec3d(0), 1, Vec3i(3, 3, 3), std::vector<double>{1, 1, 1}, remove_subvolumes, 0, 0);
//	Environment::GetMesoscopicRegions().emplace_back(Vec3d(3, 0, 0), 1, Vec3i(3, 3, 3), std::vector<double>{1, 1, 1}, std::vector<Vec3i>{}, 0, 1);
//
//	Environment::GetMesoscopicRegion(1).AddNeighbour(Environment::GetMesoscopicRegion(0));
//	Environment::GetMesoscopicRegion(0).AddNeighbour(Environment::GetMesoscopicRegion(1));
//	
//
//	//Environment::GetMesoscopicRegions().at(0).AddZerothOrderReaction({ 0 }, 1);
//	//Environment::GetMesoscopicRegions().at(0).AddFirstOrderReaction(1, {2}, 1);
//	//Environment::GetMesoscopicRegions().at(0).AddSecondOrderReaction(0, 1, { 2 }, 1);
//
//	//ReactionManager::AddSecondOrderReaction(0, 1, { 2 }, 0, 0, 1, {}, { 0 });
//	//Environment::LinkReactionsToRegions();
//
//	//Environment::GetMesoscopicRegion(0).RemoveInterior(Vec3d(2, 2, 0), Vec3d(1, 1, 3));
//	for (auto& meso_region : Environment::GetMesoscopicRegions())
//	{
//		Environment::GetEventQueue().Add(&meso_region);
//		meso_region.LinkSiblingSubvolumes();
//		meso_region.AddSubvolumesToQueue();
//	}
//
//	double action_interval = Environment::GetRunTime() / 5;
//	double release_interval = action_interval / 2;
//	double slot_interval = release_interval / 5;
//	int modulation_strength = 1;
//	int n_modulation_bits = 2;
//	double bit_probability = 0.3;
//	std::vector<int> release_molecules = { 0, 1, 1 };
//	//
//	Environment::GetActiveActors().emplace_back(std::make_unique<ActiveActorRandomBits>(
//		action_interval, release_interval, slot_interval,
//		bit_probability, n_modulation_bits,
//		release_molecules, modulation_strength, Environment::GetRegions({}), Environment::GetMesoscopicRegions({0}),
//		std::make_unique<ActiveActorBox>(Vec3d(0), Vec3d(1, 1, 1)), 0, 5, 0));
//
//	for (int i = 0; i < 0; i++)
//	{
//		//Environment::GetMesoscopicRegion(0).AddMolecule(i % 2, { 0.5, 0.5, 0.5 });
//		Environment::GetMesoscopicRegion(0).AddMolecule(0, { 3.5, 0.5, 0.5 });
//	}
//	
//	//ShapelessPassiveActor(const MicroscopicRegionIDs& microscopic_region_ids, const MesoscopicRegionIDs& mesoscopic_region_ids, const MoleculeIDs& molecule_ids, double start_time, int priority, double time_step, const PassiveActorID& id, bool record_positions, bool record_time);
//
//	double time_step = 0.05;
//	Environment::GetPassiveActors().reserve(Environment::GetMesoscopicRegions().size());
//	LOG_INFO(Environment::GetMesoscopicRegions().size());
//	for (int i = 0; i < Environment::GetMesoscopicRegions().size(); i++)
//	{
//		Environment::GetPassiveActors().emplace_back(std::make_unique<ShapelessPassiveActor>(MicroscopicRegionIDs({ }),
//			MesoscopicRegionIDs({ MesoscopicRegionID(i) }), MoleculeIDs({ 0, 1, 2 }), 0, -1, time_step, PassiveActorID(i), true, true));
//	}
//
//	Json json_regions;
//	for (auto& region : Environment::GetMesoscopicRegions())
//	{
//		Json mesoscopic_region;
//		mesoscopic_region["box"] = static_cast<shape::basic::Box>(region.GetBoundingBox());
//		for (auto& subvolume : region.GetSubvolumes())
//		{
//			mesoscopic_region["subvolumes"].emplace_back(static_cast<shape::basic::Box>(subvolume.GetBoundingBox()));
//		}
//		json_regions["mesoscopic"].emplace_back(mesoscopic_region);
//	}
//	//std::ofstream subvolume_file(Environment::GetSimulationPath() + "/subvolumes.json");
//	//subvolume_file << JsonToString(json_subvolumes); subvolume_file.close();
//	std::ofstream region_file(Environment::GetSimulationPath() + "/regions.json");
//	region_file << JsonToString(json_regions); region_file.close();
//
//	Json json_actors, shapeless_actor;
//	shapeless_actor["type"] = "none";
//	for (auto& passive_actor : Environment::GetPassiveActors())
//	{
//		if (passive_actor->GetShape() == nullptr)
//		{
//			json_actors["shapes"].emplace_back(shapeless_actor);
//		}
//		else
//		{
//			json_actors["shapes"].emplace_back(*(passive_actor->GetShape()));
//		}
//	}
//	std::ofstream actors_file(Environment::GetSimulationPath() + "/passive_actors.json");
//	actors_file << JsonToString(json_actors);
//	actors_file.close();
//
//
//	json_actors.clear();
//	for (auto& actor : Environment::GetActiveActors())
//	{
//		json_actors["shapes"].emplace_back(actor->GetShape());
//	}
//	std::ofstream active_actors_file(Environment::GetSimulationPath() + "/active_actors.json");
//	active_actors_file << JsonToString(json_actors);
//	active_actors_file.close();
//
//	for (auto& actor : Environment::GetPassiveActors())
//	{
//		Environment::GetEventQueue().Add(actor.get());
//	}
//
//	for (auto& actor : Environment::GetActiveActors())
//	{
//		Environment::GetEventQueue().Add(actor.get());
//	}
//
//	//LOG_INFO("next event = {}", event_queue.Front());
//	//LOG_INFO("region event time = {}, ", region.GetEventTime());
//
//	//LOG_INFO(event_queue.Front());
//
//	do {
//		LOG_INFO("Realisation {}", Environment::GetRealisationNumber());
//		if (Environment::GetRealisationNumber() > 0)
//		{
//			for (auto& passive_actor : Environment::GetPassiveActors())
//			{
//				passive_actor->NextRealisation();
//			}
//			for (auto& region : Environment::GetRegions())
//			{
//				region->NextRealisation();
//			}
//			for (auto& active_actors : Environment::GetActiveActors())
//			{
//				active_actors->NextRealisation();
//			}
//			for (auto& region : Environment::GetMesoscopicRegions())
//			{
//				region.NextRealisation();
//			}
//		}
//		while (true)
//		{
//			//Environment::GetMesoscopicRegion(0).Print();
//			//Environment::GetMesoscopicRegion(1).Print();
//			auto& event = Environment::GetEventQueue().Front();
//			Environment::SetTime(event.GetEventTime());
//			if (Environment::GetTime() > Environment::GetRunTime())
//			{
//				break;
//			}
//			//LOG_INFO("Event:({})", event.LogEvent());
//			event.Run();
//		}
//	} while (Environment::NextRealisation());
//}

//   ensure naming consistency with id's and ptrs. avoid id name unless local to function only
// X to avoid passive id to each object just store static variable?
// * remove start time from regions
//   ensure consistency with passing ids and passing objects. Only pass ids if then not just calling environment in constructor
//   pass shapes by const ref
//   pass enums by const ref
// X does FirstOrderReaction and SecondOrderReaction for microscopic regions need a next realisation function?
// 	 test delete area of mesoscopic region
// check logging of array of array of ints
// region relationship of type none should be done automatically for neighbours (would require region relation checking)
// finish adding in range functions for arrays
// RenameIsInt to ThrowIfNotInt
// current relationships are only for microscopci regions
// need to be able to search in microscopic regions only
// turn microscopic surface type into surface type per molecule type
// consider grouping all optional json keys 
// mesoscopic region no logn need to link sibling subvolumes and subvoluem queues later as none are deleted
// import shapes from config file in MATLAB
// https://uk.mathworks.com/matlabcentral/answers/724917-forcing-a-scalar-to-be-represented-as-a-1x1-vector
// clean up matlab compilation
// still need visualisation of debug paths
// switch molecule format from vector of molecule IDs to vector of number of molecules per type
// reactions
// active actors
// is a propensity link to products required because products do not affect the propensity of reactions?
// add maximum number of reflections to json config file
// make colours of molecules and regions match
// change active actors to release products according to [5, 6, 2, 0, 1]
// update modulation stength from int to double
// what is burst mode?
// add remaining active actor constructors to config
// current molecule generation either by reactions or active actors can be in child regions
// rename molecule type to release to NumberOfMoleculeToReleasePerMoleculeType
// update molecule generation in mesoscopic regions
// may need to update is overlapping box code as it includes neighbouring.
// surfaces on the boundary of two rect regions will 'overlap' / 'be neighbours' of both surfaces, even if you want the surface to ownly release molecules onto one region
// only volume actors should be allowed to be specified by multiple regions
// need to catch cells in MATLAB


// should low priority relative IsRegion be true for meso?
// add mesoscopic relationships for certain molecule types
// draw active actor points
// add uniform flow
// add passive actor per mesoscopic subvolume

// If subvolumes of another molecule type are a different size are they linking?









// Questions
// Can zero reaction molecules be placed inside a child region?
// Does the volume used to calculaet the next reaciton time include that of children as well?
// I assume reactions in a region only start occuring at a regions start time?
// if a molecule is generated and is inside a hgih prioprity region should have flag which specifies if molecule placement should fail
// If the molecule can participate in multiple non-surface first order reactions, then the probability of reaction c occurring is[15, Eq. (14)].
// Is this for reactions within the same region, or all regions?
// can a reaction have multiple products of the same molecule type and what format is it?
// couldnt products be placed outside the region if unbind radius is huge?
// Can a point active actor with random release time be a point source because release time calcualtion includes volume of actor
// for active active with random release times it says only 1 molecule is released per release time, does that mean then only one molecule type can be
// released from an active actor at once?
// If an active actor is defined over multiple regions is a region randomly selected to place a molecule in based on it volume, and does the volume
// ignore that removed by child regions?
// can an active actor record its release times? (currently only passive)
// active actors with a random release time do not have a bit sequence?
// how did u implement the number of event actions. Do you always set max actions by doing simulation_length / time_step
// for an active actor which is a surface do you use the area instead of the volume to calaculate the release_coefficient for a random time active actor
// When you update diffusion propensities do you return the delta?
// When you go through possible reactions you can store them in a tree like structure to reduce searches further.
// did you use a math vec struct?
// do you store a list of objects to be updated when a molecule count is updated?
// can i talk about what makes the original code < ..
// when molecules are added to a subvolume outside of its action time if the propensity updated every time a molecule is added or for example
// do you let multiple molecules be added then only update those subvolumes requiring an update
// updating event time does not work if time has not changed and/or old propensity = 0; 
// --- SetTime(current_time + (old_propensity / reaction_propensity) * (time - current_time));

// Investigate
// If a regions start time is at 0.5 seconds and time step is 1 then shouldnt the regions first event be at 1.5 seconds?
// how to stop two basic shapes being generated when microscopic surface shapes inherit from generating and collision shapes (virtual inheritance)
// if the reaction rate is for example 1 is that 1 molecule produced per second or all products per second?
// when molecules are added to regions each high priority neighbour should be checked to see if molecules can be added to them.
// Alot of relation checking could be done outside the class by an external class which simply returns a vector of regions which match.
// E.g. Regions* = RelationFinder.GetRegionsWhichOverlap(shape). Then ActiveActor.AddRegions(Regions*)
// E.g. RelationFinder.IsRelationShipValid(region_a, region_b, relationship)
// could stick I/O on a seperate thread so can write to binary files which simulation runs next step. Would require a copy of the position vector or make it lockable

// if the surface type between neighbours is not none then no point in adding relationship: Answer: Wrong as the default surface may be none and so the neighboru relationship
// provides the exception

// Learning Plan
// Learnt the importance of reserving as allowing a vector to resize invalidates pointers.
// Learnt how to use visual studio performance profiler

// KANBAN CHART =====================================================================================================================================

// DONE
// add cylinders
// change circle collision to const
// consider converting planes into single non-virtual class
// is neighbouring functions should return boolean
// only is partially neighbouring function of boxes needs to calculate area
// add as seperate function. e.g. CalculateAreaBetweenNeighbouringBoxes()
// rename relation surface shape to shape 2d
// add vector operation - (scalar)
// may need to seperate microscopic surface shape from microscopic region shapes as regions cannot be typical surfaces?
// --- currently microscopic surface shape is only for region shapes. However as regions must now be constructed using
// --- derived classes passing an invalid surface shape to a region is no longer possible.
// --- i.e. all regions shapes are surface shapes but not all surface shapes are regions shapes.
// make it easier to save region shapes in region.json. E.g. environment.saveRegions
// regions per shape to avoid unique pointer
// add zeroth order reactions for microscopic regions
// rename grid, subvolume and region 2 to _
// need to find where i use iterator loop and set iterator to another. It may be it& = it and may need to be it = it + 1. (LINK GRIDS?)
// make all shapes have virtual inheritance of basic shapes
// consider redoing reactions with reaction manager as all regions import reactions from it
// split meso classes
// ensure consistent reaction_factor reaction_coefficient_naming
// rename events to reactions
// make generating shapes virtual (only boxes, spheres and cylinders)
// reaction testing in mesoscopic regions
// diffusion between multiple mesoscopic regions
// make SubvolumeEvent class
// plot active and passive actors in MATLAB

// CANCELLED
// add clip function // wrap was clip
// add wrap function // not require atm
// add inrange function // too many variants (inclusive, exclusive, return double, return vec3d)
// consider converting cylinder into class per axis
// consider using flatten relation method for box and spheres (Flattening does not work on spheres)
// could use factory to build regions so regions dont have to be publically available in environment (factory no longer needed due to derived class)
// update test envrionments to new format (consider switch statement?) (format keep changing)
// abstract event queue (not easily possible, offers much more flexibility without abstraction)
// add simulation dir, seed dir and realisation dir for envrionment (required renaming of existing functions)

// IN PROGRESS
// consider adding generate bounding box and rect to all shapes
// consider multiple constructors for shapes so you can generate shapes using other shapes
// add a GetBasicShape() to each shape type so you can write the basic shape of a region to json

// TO DO (next)
// json input
// hybrid diffusion <<<<<<<<<<<<<<<<<<

// passive and active actors in mesoscopic regions
// review / remove redundant code in meso propensity checking
// seperate public and private functions, particularly for active actors ane mesoscopic classes

// TO DO (Imminent)
// add subvolume neighbour check
// add subvolume removal / overlap check
// add meso-micro transition
// add set event time past simulation time.
// add generation checking to regions so youngest regions can be sorted first for collision checking 
// --- (important for surfaces ! surfaces should always be checked first and assume surfaces wont be within surface)
// add != vec checks
// add scalar boolean checks for vector
// add error checking for ids (and other times when creating vectors)
// avoid requiring other types, instead pass arguments with run function. A child should be unaware of its parent as much as possible
// add function vector<Grid*> GetProductsGrids(vector ids)
// ability to add multiple of a type of reactant
// Need to remove unnecessary headers by pointing to seperate variables instead of 
// rename GetTime() to GetEventTime()
// surface type per grid
// instead of saving no shapes for shapeless regions save all the regions which the observer links to. Will require reformatting.
// Reformat actor json to allow for multiple shapes per actor.
// Make base reaction class with derived VolumeReaction and SurfaceReaction

// TO DO (Large Tasks)
// surfaces - reaction surfaces (first order), membranes, adsorpsion, absorption 
// active actors
// reactions

// TO DO (Not Imminent)
// add surface and shape3d relation checking (isneighbouring, isenvelopedby)
// add default cycles for check molecule path
// could break environment class up into RelationShipManager
// consider adding limited_vectors which are vectors where only certain ints upto a given value are allowed.
// consider adding fixed_vectors which are vectors which have fixed max capacity.
// MAY be able to make second order reactions more efficient by seperating links between internal and external subvolumes
// check whether reactions can be defined in non ascending order
// make functions more descriptive (GetRegions and GetRegionIDs)
// consider passing objects into constructor via const reference to avoid including headers in headers
// ensure consistent to ToJson to_json
// check json works
// ensure consistency between vec2 and vec3
// json / spdlog should print faces of 3d shapes
// check cpp files dont have #pragma once
// NEED TO WARN IF CANNOT WRITE TO FILE / DELETE SEED FOLDER
// find location where i have repeated a scalar to construct a vec and use new scalar constructor

// Known Bugs / Problems
// User has to manually add regions to active actors in child order otherwise molecules may be added to child and not parent
// An active actor may attempt to place a molecule in a mesoscopic region where the subvolume has been removed

// Resolved Bugs
// Molecules not diffusing across subvolumes
// Second realisation fails when removing subvolumes
// Fully neighbouring does not work for neighbouring subvolumes

// Fixed Major Bugs
// 1. WHY WERE RECENT MOLECULES AHEAD OF EVENT TIME IF BOTH REGIONS HAVE THE SAME TIME STEP AND OCCUR
// AT THE SAME TIME?
// ANSWER: Recent molecules were being added to the next event time rather than the current one
// Confusion lies in that a region time is updated before the molecule are.
// i.e. region updates its next event time from 1s to 2s. Then at 2s the event from 1 to 2 occur. 
// At the end of the update all molecules should have caught up to 2s.
// 2. Passive Actors cannot be placed into vector as the vector cannot deconstruct.
// FIXED 19/12/20
// 3. Why are molecules reflecting too many times when a cylinder spans across another cylinder?
// Not error but a result of region walls being too close together.
// Capped number of interactions before molecule is placed at last intersection
// 4. Found bug where positions were only being written every other observation for shaped passive actors?
// FIXED 19/12/20

// RESEARCH
// custom destructor
// modules

// KANBAN CHART =====================================================================================================================================
