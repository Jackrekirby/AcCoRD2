%% To DO List

% Ensure consistent style key value pairs (Word Case)           DONE
%   should class members be capitalised?
% Add functions to class so they can share default args         DONE
% Add collision plotting                                        DONE
% Add json reading                                              DONE
% Set default 3d view                                           DONE
% Add animated paths (2D / 3D)                               (X, DONE)
% Add circle surface                                            DONE
% Add cylinders
% Change path colour arguments to cell array                    DONE
% Nested classes                                                N/A

% Consider reformatting surface inputs of form (plane, shape)
% Seperate animated path functions into seperate files (2D/3D)
% Consider seperating environment functions into 2d and 3d as   DONE
% highlighting edges would be more useful for 2d while coloured
% faces is more useful for 3d.

% Track bug:
% https://uk.mathworks.com/matlabcentral/answers/666553-linewidth-parameter-not-affecting-marker-thickness-of-animated-line

% Consider removing path and collision as AnimatedPath makes them redundant
% Points still needed for rendering molecules;
% Using vargin is not longer recommended (find website reference)

%% Draw Shapes
clear all;
clc;

figure;

j = Environment('defaultFaceAlpha', 0.2, 'uniqueColorPerBoxFace', true, 'defaultColorMap', hsv(6), ...
    'defaultPathColors', {'k', 'm', 'c'});
flat = true;

if(flat)
    a = j.plotRect();
    hold on;
    b = j.plotCircle();
    c = j.plotPath2D();
    hold off;
else
    %d = e.plotRectSurface([-0.5, -0.5, -0.25], [1, 1, 0]);
    hold on;
    %f = e.plotPath3D();
    %g = e.plotSphere();
    h = j.plotBox();
    %j = e.plotCircleSurface([-1, 0, 0], 0.5, 'x');
    i = j.plotCollision3D([0, 0, 0], [0.5, 0.1, 0.25], [0, 0.2, 0.5], [1, 0.2, 0.5], 'colors', {'c', 'm', 'r', 'y'});
    hold off;
end
xlabel('x');
ylabel('y');
zlabel('z');
axis equal;
view(45,30);


%% Animated Path 3D
clear all;
clc;

p = [0, 0, 0; 1, 1, 0; 0.5, 0.5, 0; 3, 0.5, 0; 2, 0.5, 0; 2, 2, 0; 2, 1, 0; 4, 1, 0];
a = AnimatedPath3D(p, 'startTime', 0, 'duration', 0, 'showNonReflectedPoints', true);

view(3);
r = 5;
axis equal;
view(45,30);
xlim([-r, r]); zlim([-r, r]); ylim([-r, r]);

a.play();

%% Animated Path 2D
clear all;
clc;

j = jsondecode(fileread('C:\dev\AcCoRD2\MATLAB\environment.json'));
p = [0, 0; 1, 1; 0.5, 0; 3, 0.5; 2, 0.5; 2, 2; 2, 1; 4, 1];
a = AnimatedPath2D(j.path2D1}, 'startTime', 0, 'duration', 0, 'showNonReflectedPoints', true);
axis equal;
r = [-1, 5];
xlim(r); ylim(r);
a.play();

%% Json Reader

clear all;
clc;
e = Environment('defaultFaceAlpha', 0.3, 'uniqueColorPerBoxFace', false, 'defaultColorMap', hsv(6));
e.plot('C:\dev\AcCoRD2\MATLAB\environment.json');

%% Shape3D
clear all;
clc;

s = Shape3D();
s.plot('C:\dev\AcCoRD2\MATLAB\environment.json');

%% Shape2D
clear all;
clc;

s = Shape2D();
s.plot('C:\dev\AcCoRD2\MATLAB\environment.json');




