classdef Shape3D < handle
    properties (Access = public)
        % Shape Defaults (user settable)
        FaceAlpha
        FaceColor
        BoxFaceColors
        ColorPerBoxFace
        CircleResolution
        SphereResolution
        LineWidth
        LineStyle
        LineColor
        % if face/line colour is random
        FaceColorMap
        FaceColorMapIndex
        LineColorMap
        LineColorMapIndex
    end
    
    methods (Access = public)
        function obj = Shape3D(args)
            arguments
                args.FaceAlpha = 0.5
                args.FaceColor = 'random'
                args.BoxFaceColours = hsv(6);
                args.ColorPerBoxFace = false;
                args.CircleResolution = 8;
                args.SphereResolution = 30;
                args.LineWidth = 1;
                args.LineStyle = '-';
                args.LineColor = 'k'
                args.FaceColorMap = hsv(16);
                args.FaceColorMapIndex = 1;
                args.LineColorMap = hsv(16);
                args.LineColorMapIndex = 1;
            end
            
            obj.FaceAlpha = args.FaceAlpha;
            obj.FaceColor = args.FaceColor;
            obj.BoxFaceColors = args.BoxFaceColours;
            obj.ColorPerBoxFace = args.ColorPerBoxFace;
            obj.CircleResolution = args.CircleResolution;
            obj.SphereResolution = args.SphereResolution;
            obj.LineWidth = args.LineWidth;
            obj.LineStyle = args.LineStyle;
            obj.LineColor = args.LineColor;
            obj.FaceColorMap = args.FaceColorMap;
            obj.FaceColorMapIndex = args.FaceColorMapIndex;
            obj.LineColorMap = args.LineColorMap;
            obj.LineColorMapIndex = args.LineColorMapIndex;
        end
        
        function hBox = plotBox(obj, origin, length, args)
            arguments
                obj
                origin (1, 3) double = [-0.5, -0.5, -0.5];
                length (1, 3) double = [1, 1, 1];
                args.FaceAlpha double = obj.FaceAlpha;
                args.LineColor = obj.getLineColor();
                args.FaceColors = obj.BoxFaceColors;
                args.FaceColor = getBoxFaceColor(obj);
            end

            max = origin + length;
            vertices = [origin; max(1), origin(2:3); max(1:2) origin(3);...
                origin(1) max(2) origin(3); origin(1:2) max(3); ...
                max(1) origin(2) max(3); max; origin(1) max(2:3)];
            faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];

            hBox = patch('Vertices', vertices, 'Faces', faces,...
              'FaceVertexCData', args.FaceColors, 'FaceColor', args.FaceColor, ...
              'EdgeColor', args.LineColor, 'FaceAlpha', args.FaceAlpha);

            view(3);
        end

        function faceColor = getBoxFaceColor(obj)
            if(obj.ColorPerBoxFace)
                faceColor = 'flat';
            else
                faceColor = obj.getFaceColor();
            end
        end
        
        function hSphere = plotSphere(obj, centre, radius, args)
            arguments
                obj
                centre (1, 3) double = [0, 0, 0];
                radius (1, 1) double = 0.5;
                args.Resolution (1, 1) double = obj.SphereResolution;
                args.FaceAlpha double = obj.FaceAlpha;
                args.FaceColor = obj.getFaceColor();
                args.LineColor = obj.getLineColor();
            end

            [x, y, z] = sphere(args.Resolution);
            [hSphere] = mesh(centre(1) + x * radius, ...
                centre(2) + y * radius, centre(3) + z * radius, ...
                'FaceAlpha', args.FaceAlpha, 'EdgeColor', args.LineColor, ... 
                'FaceColor', args.FaceColor);
        end
        
        function hCircleSurface = plotCircleSurface(obj, centre, radius, axis, args)
            arguments
                obj
                centre (1, 3) double = [0, 0, 0];
                radius (1, 1) double = 0.5;
                axis (1, 1) char {mustBeXYZ(axis)} = 'z';
                args.Resolution (1, 1) double = obj.CircleResolution;
                args.FaceAlpha double = obj.FaceAlpha;
                args.FaceColor = obj.getFaceColor();
                args.LineColor = obj.getLineColor();
            end

            theta = linspace(0, 2*pi, args.Resolution);
            if(axis == 'x')
                x = ones(1, size(theta, 2)) * centre(1);
                y = radius * cos(theta) + centre(2);
                z = radius * sin(theta) + centre(3);
            elseif(axis == 'y')
                x = radius * cos(theta) + centre(1);
                y = ones(1, size(theta, 2)) * centre(2);
                z = radius * sin(theta) + centre(3);
            elseif(axis == 'z')
                x = radius * cos(theta) + centre(1);
                y = radius * sin(theta) + centre(2);
                z = ones(1, size(theta, 2)) * centre(3);
            end
            hCircleSurface = fill3(x, y, z, args.FaceColor, ...
                'FaceAlpha', args.FaceAlpha, ...
                'EdgeColor', args.LineColor);
        end

        function mustBeXYZ(axis)
            % Test for equal size
            if (axis ~= 'x' && axis ~= 'y' && axis ~= 'z')
                eid = 'plotCircleSurface:UnknownAxis';
                msg = 'unknown axis supplied, must be x, y or z';
                throwAsCaller(MException(eid,msg))
            end
        end
        
        function [hRectSurface] = plotRectSurface(obj, origin, length, args)
            arguments
                obj
                origin (1, 3) double = [-0.5, -0.5, 0];
                length (1, 3) double {mustHaveExactlyTwoNonZeroLengths(length)} = [1, 1, 0];
                args.FaceAlpha double = obj.FaceAlpha;
                args.FaceColor = obj.getFaceColor();
                args.LineColor = obj.getLineColor();
            end

            if(nnz(length) == 2) % SurfaceRect must recieve exactly 2 non zero lengths
                nzlength = (length == 0); % returns boolean vector containing which axis lengths are zero
                nzdims = (1:3); % assign axis x = 1, y = 2, z = 3
                zi = nzdims(nzlength); % assign the z axis as the axis with the zero length
                nzdims(nzlength) = []; % delete the zero length 

                max = origin + length;

                % assign the non-zero length axes as x and y
                xi = nzdims(1); yi = nzdims(2);

                p(xi, :) = [origin(xi), origin(xi), max(xi), max(xi)];
                p(yi, :) = [origin(yi), max(yi), max(yi), origin(yi)];
                p(zi, :) = origin(zi) * ones(1, 4);

                hRectSurface = patch(p(1, :), p(2, :), p(3, :), args.FaceColor, ...
                'EdgeColor', args.LineColor, 'FaceAlpha', args.FaceAlpha);
                view(3);
            end
        end

        function mustHaveExactlyTwoNonZeroLengths(length)
            % Test for equal size
            if (nnz(length) ~= 2)
                eid = 'plotRectSurface:TwoNonZeroDimensions';
                msg = 'RectSurface must recieve a length vector with 2 non-zero dimensions and 1 zero dimension';
                throwAsCaller(MException(eid,msg))
            end
        end
        
        function hFigure = plot(obj, jsonFilePath)
            j = jsondecode(fileread(jsonFilePath));
            hFigure = figure; 
            hold on;
            disp("Drawing 3D Environment");
            if(isfield(j.shapes, 'box'))
                for i = 1:size(j.shapes.box, 2)
                    obj.plotBox(j.shapes.box(i).origin, j.shapes.box(i).length);
                end
            end
            if(isfield(j.shapes, 'sphere'))
                for i = 1:size(j.shapes.sphere, 2)
                    obj.plotSphere(j.shapes.sphere(i).centre, j.shapes.sphere(i).radius);
                end
            end
            if(isfield(j.shapes, 'rectSurface'))
                for i = 1:size(j.shapes.rectSurface, 2)
                    obj.plotRectSurface(j.shapes.rectSurface(i).origin, j.shapes.rectSurface(i).length);
                end
            end
            if(isfield(j.shapes, 'circleSurface'))
                for i = 1:size(j.shapes.circleSurface, 2)
                    obj.plotCircleSurface(j.shapes.circleSurface(i).centre, j.shapes.circleSurface(i).radius, j.shapes.circleSurface(i).axis);
                end
            end
            hold off;
            xlabel('x');
            ylabel('y');
            zlabel('z');
            axis equal;
            view(45,30);
        end
    end
    
    methods (Access = private)
        function color = getFaceColor(obj)
            if(strcmp(obj.FaceColor, 'random'))
                color = obj.FaceColorMap(obj.FaceColorMapIndex, :);
                obj.FaceColorMapIndex = obj.FaceColorMapIndex + 1;
                if(obj.FaceColorMapIndex > size(obj.FaceColorMap, 1))
                    obj.FaceColorMapIndex = 1;
                end
            else
                color = obj.FaceColor;
            end
        end
        
        function color = getLineColor(obj)
            if(strcmp(obj.LineColor, 'random'))
                color = obj.ColorMap(obj.LineColorMapIndex, :);
                obj.LineColorMapIndex = obj.LineColorMapIndex + 1;
                if(obj.LineColorMapIndex > size(obj.LineColorMap, 1))
                    obj.LineColorMapIndex = 1;
                end
            else
                color = obj.LineColor;
            end
        end
    end
end

